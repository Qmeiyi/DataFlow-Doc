import{_ as e,a as t}from"./Reasoning_Pipeline-DeylkcrO.js";import{_ as n,c as i,b as o,o as r}from"./app-DT4DhCK_.js";const s="/DataFlow-Doc/agent_zh.png",l={};function m(c,a){return r(),i("div",null,a[0]||(a[0]=[o('<p><img src="'+e+'" alt="Dataflow-Framework"></p><h1 id="框架设计" tabindex="-1"><a class="header-anchor" href="#框架设计"><span>框架设计</span></a></h1><p>Dataflow的框架主要分为算子层和Pipeline层。</p><p>为了使用AI辅助数据处理，我们额外添加了Agent for Dataflow模块。Agent可以(1)自动编排算子 (2)自动编写数据算子 (3)Agent自动解决数据分析任务。</p><p><img src="'+t+'" alt="Reasoning-Pipeline"></p><h2 id="dataflow-算子" tabindex="-1"><a class="header-anchor" href="#dataflow-算子"><span>DataFlow 算子</span></a></h2><p>DataFlow 算子是对原始数据执行的基本处理单元，通常基于规则系统、深度学习模型或大语言模型（LLM）实现。如上图中的 Reasoning Pipeline 所示，每一个模块均可视为一个独立的 DataFlow 算子，用于完成特定的数据加工任务（如清洗、转换、验证等）。</p><h2 id="dataflow-pipeline" tabindex="-1"><a class="header-anchor" href="#dataflow-pipeline"><span>DataFlow Pipeline</span></a></h2><p>DataFlow Pipeline 是对多个 DataFlow 算子的有序编排，旨在完成一个完整的数据处理或分析任务。通过将数据生成、清洗、验证等多个步骤进行串联或并联组合，形成如上图所示的 Reasoning Pipeline，用于实现从原始数据到结构化结果的全流程自动化处理。</p><p><img src="'+s+'" alt="Dataflow-Agent"></p><h2 id="dataflow-agent" tabindex="-1"><a class="header-anchor" href="#dataflow-agent"><span>DataFlow Agent</span></a></h2><p>DataFlow Agent 是一个基于多智能体协同的自动化任务处理系统，覆盖 <strong>任务拆解 → 工具注册 → 调度执行 → 结果验证 → 报告生成</strong> 的完整流程，致力于复杂任务的智能化管理与执行。其核心模块包括：</p><ul><li><strong>Planning Agent</strong>：理解用户意图，并将高层需求拆解为具体可执行任务链；</li><li><strong>Tool Register</strong>：动态管理已有和新生成的工具（如算子、模型或脚本）；</li><li><strong>Task Dispatcher</strong>：将任务指派给 Execution Agent，支持代码自动生成与调试；</li><li><strong>Execution Agent</strong>：执行具体任务，进行数据处理、模型调用等；</li><li><strong>Evaluation Agent</strong>：对执行结果进行质量与正确性评估；</li><li><strong>Analysis Agent</strong>：对流程和结果进行总结，生成结构化报告。</li></ul><p>系统支持短期与长期记忆机制，能够维持多轮交互状态，在保证标准化流程的同时，具备高度的动态适应能力，尤其适用于数据治理、自动化数据分析等需要多阶段协同的复杂场景。</p>',14)]))}const h=n(l,[["render",m]]),d=JSON.parse('{"path":"/zh/guide/basicinfo/framework/","title":"框架设计","lang":"zh-CN","frontmatter":{"title":"框架设计","icon":"material-symbols:auto-transmission-sharp","createTime":"2025/06/13 14:59:56","permalink":"/zh/guide/basicinfo/framework/"},"readingTime":{"minutes":1.85,"words":556},"git":{"createdTime":1749801349000,"updatedTime":1750154453000,"contributors":[{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Sunnyhaze?v=4","url":"https://github.com/Sunnyhaze"},{"name":"Ma, Xiaochen","username":"","email":"mxch1122@126.com","commits":2,"avatar":"https://gravatar.com/avatar/c86bc98abf428aa442dfc12c76e70e324a551ebc637e5ed6634d60fbd3811221?d=retro"},{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"},{"name":"HeRunming","username":"HeRunming","email":"2100010636@stu.pku.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/HeRunming?v=4","url":"https://github.com/HeRunming"}]},"filePathRelative":"zh/notes/guide/basicinfo/framework.md","headers":[]}');export{h as comp,d as data};
