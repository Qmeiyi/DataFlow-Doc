import{_ as e,c as d,b as o,o as i}from"./app-DT4DhCK_.js";const a={};function l(c,t){return i(),d("div",null,t[0]||(t[0]=[o('<p>DataFlow实现了向量数据库的相关接口，下面以MyScaleStorage为例进行介绍。</p><p>DataFlow数据表的结构如下</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>uuid</td><td>Primary Key</td></tr><tr><td>data</td><td>TEXT/JSON</td><td>数据本身</td></tr><tr><td>pipeline_id</td><td>uuid</td><td></td></tr><tr><td>stage</td><td>int</td><td>算子的排序</td></tr><tr><td>eval_stage</td><td>int</td><td>算子目前经过 eval 的次数</td></tr><tr><td>raw_data_id</td><td>int</td><td>Foreign Key，原始数据 id</td></tr><tr><td>task_id</td><td>TEXT</td><td>就是任务的 id</td></tr><tr><td>category</td><td>categorical</td><td>数据类型（数学/代码/科学数据/...）建议多选格式</td></tr><tr><td>description</td><td>TEXT</td><td>数据的描述（比如 xx 公司的 xx 数据）</td></tr><tr><td>format</td><td>categorical</td><td>数据格式（PT, SFT_Single, SFT_Multi, RLHF 其中一种数据类型）</td></tr><tr><td>Operator_Type</td><td>categorical</td><td>算子类型（针对 Text/Math... 还是通用算子）</td></tr><tr><td>Synthetic</td><td>categorical</td><td>是否是合成数据？（完全合成/合成 Answer/合成 Question/不是合成）</td></tr><tr><td>eval_score_{$i}</td><td>float / BOOL / int</td><td>第 i 个算法添加的内容</td></tr><tr><td>eval_algorithm_{$i}</td><td>TEXT</td><td>描述第 i 个算法是什么</td></tr><tr><td>eval_info_{$i}</td><td>TEXT</td><td>报错</td></tr></tbody></table><h3 id="数据库接口使用quick-start" tabindex="-1"><a class="header-anchor" href="#数据库接口使用quick-start"><span>数据库接口使用Quick Start</span></a></h3><p>读取数据:</p><ul><li>类型为String：<code>read_str</code></li><li>类型为JSON：<code>read_json</code></li></ul><p>写入数据:</p><ul><li><p>添加新的合成数据（如问题改写）:</p><ul><li>如果数据类型为String: <code>write_str</code></li><li>数据类型为JSON: <code>write_json</code></li></ul></li><li><p>添加标签（分数/类别/其它与原数据深度绑定的信息）:</p><ul><li>标签是可数的（如分数，有限类别）: <code>write_eval</code> 该接口将在数据的<code>eval_score</code>列写入标签。 <ul><li>如果有额外的添加信息需求（如评分理由），仍然可以通过调用该接口写入<code>eval_info</code>列。</li></ul></li><li>标签是不可数的（如根据原问题数据生成的答案）: <code>write_data</code> 该接口直接修改数据的<code>data</code>列，并可通过参数对其它列进行修改。</li></ul></li></ul><h3 id="接口及其参数介绍" tabindex="-1"><a class="header-anchor" href="#接口及其参数介绍"><span>接口及其参数介绍</span></a></h3><p>读取数据的接口如下:</p><ul><li><code>read_str(self, key_list: list[str], **kwargs)</code>: data字段为string类型时使用，key_list为想要读取出的字段组成的列表，类型限制为<code>list[str]</code>，可变参数中必须含有以下几种参数： <ul><li><code>category</code>: 数据的类型，如&quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;</li><li><code>pipeline_id</code>: 当前pipeline的id，要求在配置文件中传入。</li><li><code>stage</code>: 当前算子在pipeline中的位置，要求在配置文件中传入。</li><li><code>eval_stage</code>: 当前算子想要读出的数据中含有eval数据的列数，要求在配置文件中传入。 <ul><li>!<code>maxmin_scores</code>: 若<code>eval_stage</code>大于0，读入时可能需要对分数进行最大值和最小值的筛选，要求在配置文件中传入list[float]形式的read_min_score和read_max_score。传入时的格式可以参考<code>maxmin_scores=[dict(zip([&#39;min_score&#39;, &#39;max_score&#39;], list(_))) for _ in list(zip(self.read_min_score, self.read_max_score))]</code></li></ul></li><li>!<code>format</code>: 数据格式，参考表结构</li><li>!<code>syn</code>: 是否为合成数据，合成数据的具体格式，在&quot;&quot;（非合成数据）, &quot;syn&quot;（合成数据）, &quot;syn_q&quot;（合成问题数据）, &quot;syn_a&quot;（合成答案数据）, &quot;syn_qa&quot;（合成QA对数据）中选择</li></ul></li></ul><p>返回的数据为list[dict]类型,其中默认带有主键,存储在id关键字下。</p><ul><li><p><code>read_json(self, key_list: list[str], **kwargs)</code>: data字段为JSON类型时使用, 使用方法与<code>read_str()</code>相同，此处返回的数据中data字段下为dict类型的数据。</p></li><li><p><code>read_str_by_stage(self, key_list: list[str], **kwargs)</code>: data字段为str类型时使用，可变参数中不需要有<code>format</code>和<code>syn</code>。</p></li><li><p><code>read_json_by_stage(self, key_list: list[str], **kwargs)</code>: data字段为JSON类型时使用，可变参数中不需要有<code>format</code>和<code>syn</code>。</p></li></ul><p>写入数据的接口如下：</p><ul><li><p><code>write_str(self, data: list[dict], **kwargs)</code>: data参数中是需要写入的数据,字典中id关键字对应的是原数据的id,data关键字下的数据要求为<code>str</code>类型。可变参数中需要的参数如下：</p><ul><li><code>category</code>: 数据的类型，如&quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;</li><li><code>format</code>: 数据格式，参考表结构</li><li><code>syn</code>: 是否为合成数据，合成数据的具体格式，在&quot;&quot;（非合成数据）, &quot;syn&quot;（合成数据）, &quot;syn_q&quot;（合成问题数据）, &quot;syn_a&quot;（合成答案数据）, &quot;syn_qa&quot;（合成QA对数据）中选择</li><li><code>pipeline_id</code>: 当前pipeline的id，要求在配置文件中传入。</li><li><code>stage</code>: 当前算子在pipeline中的位置+1，要求在配置文件中传入。 使用该方法将在数据库中加入新的行，新数据eval列数据清空。</li></ul></li><li><p><code>write_json(self, data: list[dict], **kwargs)</code>: data参数中是需要写入的数据,字典中id关键字对应的是原数据的id,data关键字下的数据要求为<code>dict</code>类型。可变参数中需要的参数如下：</p><ul><li><code>category</code>: 数据的类型，如&quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;</li><li><code>format</code>: 数据格式，参考表结构</li><li><code>syn</code>: 是否为合成数据，合成数据的具体格式，在&quot;&quot;（非合成数据）, &quot;syn&quot;（合成数据）, &quot;syn_q&quot;（合成问题数据）, &quot;syn_a&quot;（合成答案数据）, &quot;syn_qa&quot;（合成QA对数据）中选择</li><li><code>pipeline_id</code>: 当前pipeline的id，要求在配置文件中传入。</li><li><code>stage</code>: 当前算子在pipeline中的位置+1，要求在配置文件中传入。 使用该方法将在数据库中加入新的行，新数据eval列数据清空。</li></ul></li><li><p><code>write_eval(self, data: list[dict], **kwargs)</code>: data参数中是原数据的id和新数据的分数(float类型)和信息(str类型)。要求的可变参数如下：</p><ul><li><code>stage</code>: 当前算子在pipeline中的位置+1，要求在配置文件中传入。</li><li><code>score_key</code>: data参数中分数对应的关键字，若data字段的形式为<code>[{&#39;id&#39;: xxx, &#39;score1&#39;: xxx}]</code>，则此处应传入&#39;score1&#39;。</li><li><code>algo_name</code>: 算子名称，可以默认使用<code>self.__class__.__name__</code></li><li>!<code>info_key</code>: data参数中需要额外存储的信息，若data字段的形式为<code>[{&#39;id&#39;: xxx, &#39;score1&#39;: xxx, &#39;info1&#39;: xxx}]</code>，则此处应传入&#39;info1&#39;。 使用该方法将对数据库中原数据所在的行的eval列进行修改。</li></ul></li><li><p><code>write_data(self, data: list[dict], **kwargs)</code>: data参数中是原数据的id和新的data字段的数据。要求的可变参数如下：</p><ul><li><code>stage</code>: 当前算子在pipeline中的位置+1，要求在配置文件中传入。</li><li>!<code>__some_keys__</code>: 如果data其他非eval字段需要修改，可以传入可变参数中。 <ul><li>注意：此处的syn参数要改成Syntheic，否则会报错。</li></ul></li></ul></li></ul><p>使用该方法将对数据库中原数据所在的行的data列进行修改。</p>',16)]))}const s=e(a,[["render",l]]),n=JSON.parse('{"path":"/zh/dev_guide/storage_info/","title":"存储模块","lang":"zh-CN","frontmatter":{"title":"存储模块","createTime":"2025/06/12 12:00:01","permalink":"/zh/dev_guide/storage_info/"},"readingTime":{"minutes":5.66,"words":1698},"git":{"createdTime":1749717987000,"updatedTime":1750154585000,"contributors":[{"name":"MOLYHECI","username":"MOLYHECI","email":"molyheci@outlook.com","commits":5,"avatar":"https://avatars.githubusercontent.com/MOLYHECI?v=4","url":"https://github.com/MOLYHECI"},{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Sunnyhaze?v=4","url":"https://github.com/Sunnyhaze"},{"name":"Ma, Xiaochen","username":"","email":"mxch1122@126.com","commits":1,"avatar":"https://gravatar.com/avatar/c86bc98abf428aa442dfc12c76e70e324a551ebc637e5ed6634d60fbd3811221?d=retro"}]},"filePathRelative":"zh/notes/dev_guide/storage_info.md","headers":[]}');export{s as comp,n as data};
