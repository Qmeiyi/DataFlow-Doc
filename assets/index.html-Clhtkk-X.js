import{_ as t,c as o,b as a,o as d}from"./app-DT4DhCK_.js";const i={};function r(c,e){return d(),o("div",null,e[0]||(e[0]=[a('<p>DataFlow implements interfaces for vector databases. Below is an introduction using MyScaleStorage as an example.</p><p>The structure of a DataFlow data table is as follows:</p><table><thead><tr><th>Field Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>uuid</td><td>Primary Key</td></tr><tr><td>data</td><td>TEXT/JSON</td><td>The actual data</td></tr><tr><td>pipeline_id</td><td>uuid</td><td></td></tr><tr><td>stage</td><td>int</td><td>Order of the operator in the pipeline</td></tr><tr><td>eval_stage</td><td>int</td><td>Number of times the data has been evaluated</td></tr><tr><td>raw_data_id</td><td>int</td><td>Foreign Key, ID of the raw data</td></tr><tr><td>task_id</td><td>TEXT</td><td>Task ID</td></tr><tr><td>category</td><td>categorical</td><td>Data type (math/code/scientific/etc.), recommended in multi-label format</td></tr><tr><td>description</td><td>TEXT</td><td>Description of the data (e.g., data from company X)</td></tr><tr><td>format</td><td>categorical</td><td>Data format (PT, SFT_Single, SFT_Multi, RLHF, etc.)</td></tr><tr><td>Operator_Type</td><td>categorical</td><td>Type of operator (Text/Math-specific or general)</td></tr><tr><td>Synthetic</td><td>categorical</td><td>Whether the data is synthetic (fully synthetic/synthetic answer/question/none)</td></tr><tr><td>eval_score_{$i}</td><td>float / BOOL / int</td><td>Content added by algorithm $i</td></tr><tr><td>eval_algorithm_{$i}</td><td>TEXT</td><td>Description of algorithm $i</td></tr><tr><td>eval_info_{$i}</td><td>TEXT</td><td>Error information</td></tr></tbody></table><h3 id="quick-start-for-using-database-interfaces" tabindex="-1"><a class="header-anchor" href="#quick-start-for-using-database-interfaces"><span>Quick Start for Using Database Interfaces</span></a></h3><p>Reading data:</p><ul><li>For String type: <code>read_str</code></li><li>For JSON type: <code>read_json</code></li></ul><p>Writing data:</p><ul><li><p>Adding new synthetic data (e.g., rewritten questions):</p><ul><li>For String type: <code>write_str</code></li><li>For JSON type: <code>write_json</code></li></ul></li><li><p>Adding labels (scores/categories/other metadata tied to original data):</p><ul><li>If the label is countable (e.g., score, finite category): use <code>write_eval</code>, which writes to the <code>eval_score</code> column. <ul><li>To add additional info (e.g., scoring rationale), also use this method to write to the <code>eval_info</code> column.</li></ul></li><li>If the label is uncountable (e.g., an answer generated from the original question): use <code>write_data</code>, which modifies the <code>data</code> column and allows modification of other fields via parameters.</li></ul></li></ul><h3 id="interface-and-parameter-descriptions" tabindex="-1"><a class="header-anchor" href="#interface-and-parameter-descriptions"><span>Interface and Parameter Descriptions</span></a></h3><h3 id="read-interfaces" tabindex="-1"><a class="header-anchor" href="#read-interfaces"><span>Read Interfaces</span></a></h3><ul><li><code>read_str(self, key_list: list[str], **kwargs)</code>: Use when <code>data</code> is of string type. <code>key_list</code> is a list of fields to read. Required <code>kwargs</code>: <ul><li><code>category</code>: Data type (e.g., &quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;)</li><li><code>pipeline_id</code>: Current pipeline ID (from config)</li><li><code>stage</code>: Current operator stage (from config)</li><li><code>eval_stage</code>: Number of eval columns to read (from config) <ul><li><code>maxmin_scores</code>: If <code>eval_stage</code> &gt; 0, provide score filters as <code>read_min_score</code> and <code>read_max_score</code> in <code>list[float]</code> format. Example: <code>maxmin_scores = [dict(zip([&#39;min_score&#39;, &#39;max_score&#39;], list(_))) for _ in zip(self.read_min_score, self.read_max_score)] </code></li></ul></li><li>!<code>format</code>: Data format, as in the table</li><li>!<code>!syn</code>: Synthetic data format - choose from &quot;&quot;, &quot;syn&quot;, &quot;syn_q&quot;, &quot;syn_a&quot;, &quot;syn_qa&quot;</li></ul></li></ul><p>Returns data as a <code>list[dict]</code> with default <code>id</code> as the primary key.</p><ul><li><code>read_json(self, key_list: list[str], **kwargs)</code>: Use when <code>data</code> is JSON. Same as <code>read_str</code>, but returns <code>data</code> as a <code>dict</code>.</li></ul><h3 id="write-interfaces" tabindex="-1"><a class="header-anchor" href="#write-interfaces"><span>Write Interfaces</span></a></h3><ul><li><code>write_str(self, data: list[dict], **kwargs)</code>: The <code>data</code> parameter contains the data to be written. In the dictionary, the key <code>id</code> corresponds to the ID of the original data, and the data under the <code>data</code> key must be of type <code>str</code>. The required parameters in <code>**kwargs</code> are as follows: <ul><li><code>category</code>: The type of data, such as &quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;</li><li><code>format</code>: Data format, refer to the table structure</li><li><code>syn</code>: Whether the data is synthetic. Choose from &quot;&quot; (not synthetic), &quot;syn&quot; (synthetic), &quot;syn_q&quot; (synthetic question), &quot;syn_a&quot; (synthetic answer), &quot;syn_qa&quot; (synthetic QA pair)</li><li><code>pipeline_id</code>: The ID of the current pipeline, must be provided in the config file</li><li><code>stage</code>: The position of the current operator in the pipeline + 1, must be provided in the config file</li></ul></li></ul><p>This method will add new rows to the database. The eval columns for the new data will be cleared.</p><ul><li><code>write_json(self, data: list[dict], **kwargs)</code>: The <code>data</code> parameter contains the data to be written. In the dictionary, the key <code>id</code> corresponds to the ID of the original data, and the data under the <code>data</code> key must be of type <code>dict</code>. The required parameters in <code>**kwargs</code> are as follows: <ul><li><code>category</code>: The type of data, such as &quot;reasoning&quot;, &quot;text&quot;, &quot;code&quot;</li><li><code>format</code>: Data format, refer to the table structure</li><li><code>syn</code>: Whether the data is synthetic. Choose from &quot;&quot; (not synthetic), &quot;syn&quot; (synthetic), &quot;syn_q&quot; (synthetic question), &quot;syn_a&quot; (synthetic answer), &quot;syn_qa&quot; (synthetic QA pair)</li><li><code>pipeline_id</code>: The ID of the current pipeline, must be provided in the config file</li><li><code>stage</code>: The position of the current operator in the pipeline + 1, must be provided in the config file</li></ul></li></ul><p>This method will add new rows to the database. The eval columns for the new data will be cleared.</p><ul><li><code>write_eval(self, data: list[dict], **kwargs)</code>: The <code>data</code> parameter includes the original data ID and the new score (of type float) and information (of type str). The required parameters in <code>**kwargs</code> are as follows: <ul><li><code>stage</code>: The position of the current operator in the pipeline + 1, must be provided in the config file</li><li><code>score_key</code>: The key corresponding to the score in the data parameter. If the data field is in the form <code>[{&#39;id&#39;: xxx, &#39;score1&#39;: xxx}]</code>, this should be <code>&#39;score1&#39;</code></li><li><code>algo_name</code>: Name of the operator, can default to <code>self.__class__.__name__</code></li><li><code>info_key</code>: Extra information to be stored. If the data field is in the form <code>[{&#39;id&#39;: xxx, &#39;score1&#39;: xxx, &#39;info1&#39;: xxx}]</code>, this should be <code>&#39;info1&#39;</code></li></ul></li></ul><p>This method modifies the eval columns of the existing row in the database.</p><ul><li><code>write_data(self, data: list[dict], **kwargs)</code>: The <code>data</code> parameter includes the original data ID and the new content for the <code>data</code> field. The required parameters in <code>**kwargs</code> are as follows: <ul><li><code>stage</code>: The position of the current operator in the pipeline + 1, must be provided in the config file</li><li><code>__some_keys__</code>: If other non-eval fields in the data need to be modified, they can be passed in as additional keyword arguments <ul><li>Note: The <code>syn</code> parameter here should be changed to <code>Synthetic</code>, otherwise an error will be raised.</li></ul></li></ul></li></ul><p>This method modifies the <code>data</code> column of the existing row in the database.</p>',22)]))}const n=t(i,[["render",r]]),l=JSON.parse('{"path":"/en/dev_guide/storage_info/","title":"Storage Module","lang":"en-US","frontmatter":{"title":"Storage Module","createTime":"2025/06/12 12:00:01","permalink":"/en/dev_guide/storage_info/"},"readingTime":{"minutes":3.02,"words":906},"git":{"createdTime":1749717987000,"updatedTime":1750154585000,"contributors":[{"name":"MOLYHECI","username":"MOLYHECI","email":"molyheci@outlook.com","commits":4,"avatar":"https://avatars.githubusercontent.com/MOLYHECI?v=4","url":"https://github.com/MOLYHECI"},{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Sunnyhaze?v=4","url":"https://github.com/Sunnyhaze"},{"name":"Ma, Xiaochen","username":"","email":"mxch1122@126.com","commits":2,"avatar":"https://gravatar.com/avatar/c86bc98abf428aa442dfc12c76e70e324a551ebc637e5ed6634d60fbd3811221?d=retro"}]},"filePathRelative":"en/notes/dev_guide/storage_info.md","headers":[]}');export{n as comp,l as data};
